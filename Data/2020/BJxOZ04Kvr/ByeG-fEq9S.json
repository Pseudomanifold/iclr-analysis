{"rating": "1: Reject", "experience_assessment": "I do not know much about this area.", "review_assessment:_checking_correctness_of_derivations_and_theory": "I assessed the sensibility of the derivations and theory.", "review_assessment:_checking_correctness_of_experiments": "I assessed the sensibility of the experiments.", "title": "Official Blind Review #1", "review_assessment:_thoroughness_in_paper_reading": "I made a quick assessment of this paper.", "review": "The paper proposes a code completion tool InvocMap, to predict nested method invocations in programming language code. \n\nI do not entirely buy the premise that \"developers need to remember the structure and the combination of invocations depending on their purpose.\" which is stated as a reason for why the task is challenging. The order of nesting in method invocation can be resolved often by examining the return type and argument type(s) of each method.\n\nWeaknesses\n1. Writing can be improved significantly. It is hard to understand the difficulty of the problem that is being addressed.\n2. Little novelty. A standard SMT approach is adopted with little modification. \n3. How is it ensured that the output is syntactically correct? \n4. Little analysis in the experiments, no strong baselines. Why not try a neural seq2seq model?\n\nTypos/Grammar\n1. There are two reasons \"cause to\" this challenge.\n2.  First, large scale code corpus contains \"noise\" data\n\nI am not entirely certain that this paper is appropriate for this venue.  "}