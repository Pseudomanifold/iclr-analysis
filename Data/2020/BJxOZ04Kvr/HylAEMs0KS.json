{"experience_assessment": "I do not know much about this area.", "rating": "1: Reject", "review_assessment:_thoroughness_in_paper_reading": "I made a quick assessment of this paper.", "review_assessment:_checking_correctness_of_experiments": "I assessed the sensibility of the experiments.", "title": "Official Blind Review #3", "review_assessment:_checking_correctness_of_derivations_and_theory": "N/A", "review": "This paper present a strategy to map the method name to method invocation. This contains several modules: a classifier module to classify the invocation by level of abstraction; A rule-based system to extract code; an algorithm to visit a method invocation inside the code environment; and finally a SMT system for predicting the sequences of AST (abstract syntax tree) structure given method name and content. I am not an expert on program synthesis, so I am evaluating this paper based on my educated guess, thus probably underestimate or miss some merits of this paper. I think the writing is clear and pedagogical, so that a non-expert reader can learn how such a system can be designed. However, although this task sounds interesting to me, this appears to me more like a system design paper rather than a typical top-notch machine learning paper. Specifically,\n\n1. the technical innovations and the existing strategies are presented in a mixed way, rendering it quite difficult to clearly distinguish the novelty of this paper. \n\n2. Although I am not familiar with the evaluation metrics as presented in this paper, I feel that the judgements are rather subjective as no baselines are included in the comparison. \n\n"}