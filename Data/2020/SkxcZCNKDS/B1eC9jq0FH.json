{"rating": "3: Weak Reject", "experience_assessment": "I have published one or two papers in this area.", "review_assessment:_checking_correctness_of_derivations_and_theory": "I assessed the sensibility of the derivations and theory.", "review_assessment:_checking_correctness_of_experiments": "I did not assess the experiments.", "title": "Official Blind Review #3", "review_assessment:_thoroughness_in_paper_reading": "I read the paper thoroughly.", "review": "This paper aims to theoretically understand the reason that MaxEnt RL (RL with an entropy bonus) works so well. It suggests that MaxEnt RL works well in the setting where there is uncertainty about the reward function. It proves two main theorems to support this. First, for any instance of a class of \u201cmeta-POMDPs\u201d where the agent only has a *belief* over the goal trajectory, there exists a reward function for which MaxEnt RL on that reward function is the optimal solution to the meta-POMDP. Second, for any reward and MDP, there exists a set of reward functions such that MaxEnt RL maximizes the worst-case return for a reward chosen from that set.\n\nThe paper tackles an important question, since entropy bonuses are commonly used in RL, but are primarily a \u201chack\u201d added to incentivize exploration without any principled justification. However, I question the applicability of the theorems to the success of MaxEnt RL.\n\nI\u2019m recommending a weak reject, for the following reasons, in order of importance (explained in more detail later):\n- Section 4.2 assumes that you must deploy a single policy across all timesteps of the meta-POMDP, but it should be possible to update your policy across timesteps.\n- Section 4.3 claims to reduce goal-reaching problems to single-goal-trajectory problems, but this doesn\u2019t work because goal-reaching problems can have multiple optimal trajectories.\n- The adversary of Theorem 5.2 is quite unusual, and it is unclear why robustness to such an adversary should be useful.\n- Since the theorems are about cases where the agent is uncertain about the reward, they don\u2019t explain why MaxEnt RL is useful even in the case where we have no adversaries and care only about performance on a single reward function.\n- The paper is not very clear. The quality of exposition could be improved significantly.\n\nIt seems quite likely that some of my critiques are misguided (especially the one about Section 4.2), and I encourage the authors to point this out in the rebuttal.\n\n----\n\nMy primary complaint is that these theorems don\u2019t apply to the case they are meant to explain: the authors say they want to explain why MaxEnt RL works in practice, but their explanations and theorems center on cases in which the reward is unknown. But currently MaxEnt RL works well on tasks where the reward is known! It\u2019s not that MaxEnt RL finds different solutions that don\u2019t do well on the original reward but do better by some other criterion: the solutions found by MaxEnt RL are the best solutions when evaluated by the known reward.\n\nNonetheless, it is still an interesting question to study the benefits of MaxEnt RL in the context of reward uncertainty. I\u2019d recommend that the authors change the motivation and introduction to focus on that setting, without claiming to explain why MaxEnt RL works with current systems. For the rest of the review, I\u2019ll evaluate the paper from that perspective.\n\n----\n\nI found the section on meta-POMDPs very confusing. First, one minor confusion: I believe you are assuming that the underlying MDP is deterministic? (Perhaps not, but the assumption that there is a policy with probability proportional to sqrt(p(tau)) is much less likely to hold in stochastic environments.)\n\nSection 4.2 is confusing to me. First, let me quote the description of the meta-POMDP: \u201cEach meta-step of the meta-POMDP corresponds to one episode of the original MDP. A meta-episode is a sequence of meta-steps, which ends when the agent solves the task in the original MDP. Intuitively, each meta-episode in the meta-POMDP corresponds to multiple trials in the original MDP, where the task remains the same across trials. The agent keeps interacting with the MDP until it solves the task.\u201d\n\nBy my understanding, this means that in the meta-POMDP the agent is able to learn across episodes. In particular, in the setting where the agent has a distribution over a single goal trajectory, and the underlying MDP is deterministic, the optimal policy is obvious: try the most probable goal trajectory, then try the second most probable goal trajectory, and so on until you find the true goal trajectory, and then repeatedly execute that goal trajectory. Why is this not the result of Section 4.2?\n\n(My guess is that you assumed that the agent is not able to learn across episodes (why?), or that the agent receives literally zero information about whether or not it has completed the goal (highly unrealistic, and certainly doesn\u2019t apply to the physician example). Perhaps there is a different unstated assumption instead.)\n\nI\u2019d encourage the authors to more clearly formalize the meta-POMDP as well as the relevant assumptions that lead to the results of Section 4.2. As currently defined, I don\u2019t agree with Section 4.1, though I do think there is a formalization which makes everything work (though that formalization does not seem realistic to me).\n\n----\n\nI\u2019m also confused about Section 4.3. In Section 4 (before subsections) and Section 4.1, it seems that the model is that there is a *single* goal trajectory which the agent must replicate, but the agent is uncertain about that trajectory. However, Section 4.3 considers goal-reaching problems, in which there can be *multiple* goal trajectories. I don\u2019t understand how the goal-reaching problem is reduced to the single-goal-trajectory problem: I believe the current reduction is *not* solving a goal-reaching problem.\n\nFor simplicity, let\u2019s consider a goal-reaching problem where the goal is known: a 3x3 grid where the agent starts at the bottom left and the goal is to get to the top right. Assume a horizon of 4 for simplicity. Then any trajectory involving two Ups and two Rights solves the problem, i.e. there are six optimal trajectories: {UURR, URUR, URRU, RUUR, RURU, RRUU}. However, the meta-POMDP defined in the reduction assigns 1/6 probability to each such trajectory, which by the semantics of the meta-POMDP means that the agent \u201cactually\u201d wants to choose one of those trajectories in particular, but doesn\u2019t know which one is appropriate. This is not an accurate representation of the goal-reaching problem: the goal-reaching problem is solved as long as *any* of these trajectories are selected.\n\n(Lemma 4.2 is technically accurate, because it only talks about the meta-POMDP and the corresponding reward function, and doesn\u2019t claim anything about the relation to the goal-reaching problem, but all the prose around Lemma 4.2 is misleading.)\n\nThis general problem persists even if you have a belief over the goal state, rather than being certain about the goal state. You could try fixing this by changing the meta-POMDP to put probability over *sets* of goal trajectories, and Section 4.1 would still go through (the regret would be a geometric random variable of the probability the trajectory lies within the true goal trajectory set), but Section 4.2 would no longer work.\n\n----\n\nTheorem 5.2 shows that there exists a set of reward functions such that MaxEnt RL maximizes the worst-case return for a reward chosen from that set. Taken literally, this is not particularly interesting, as it is also true of regular RL: the optimal regular RL policy pi optimizes the worst-case return for the set { r\u2019(s, a) = r(s, a) + f(s, a) with f in F }, for any class of non-negative functions F that contains the zero function, simply because every other reward in the set is at least as large as the true reward r(s, a). (Another set that works is { r\u2019(s, a) = K r(s, a) with K > 0 }.)\n\nSo really the interesting content of the second theorem is the particular set of reward functions that MaxEnt RL is robust to: the set {r\u2019(s, a) = r(s, a) - log q(a | s) for all q in Pi}. This is an interesting adversary model: essentially, at every state, the adversary is required to provide a non-negative bonus b_a for each action a. To prevent the adversary from providing zero bonus everywhere, the bonuses must satisfy \\sum_a exp(b_a) = 1.\n\nThis essentially means that at each state, the adversary wants to find actions that the policy doesn\u2019t take, and allocate more of the bonus to that action. Given this particular adversary, it makes sense to inject a little noise into the policy so that the adversary can\u2019t \u201chide\u201d the bonus in actions that are rarely taken, and so it makes sense the MaxEnt RL could be the best response to such an adversary. However, this is quite a strange adversary -- we wouldn\u2019t usually expect that the things we need to be robust to are going to be dividing up some bonus across actions. So I\u2019m not very confident that this theorem will actually matter in practice.\n\n----\n\nTypos:\n\nAbstract: \u201cProbability, as this strategy is called,\u201d: \u201cProbability matching\u201d\nIntroduction: \u201cmodel for decision decision making\u201d: repeated \u201cdecision\u201d\nIntroduction: \u201cempirical benefits of MaxEnt RL arise implicitly solving\u201d: \u201carise by implicitly solving\u201d\nPreliminaries: \u201cThese approaches cast optimal control as an inference problem be defining\u201d: \u201cbe\u201d --> \u201cby\u201d\nPreliminaries: In the derivation of Eq. 1, p(s_1) was dropped\nPreliminaries: The last equality in the derivation of Eq. 1 would only hold if you had a log on the LHS, so you probably wanted to maximize log p(O_t) in the entirety of the derivation.\nLemma 4.2: \u201cp\u02dc(sT(\u03c4), aT(\u03c4)) = p(\u03c4)\u201d: Reverse the order to write \u201cp(\u03c4) = p\u02dc(sT(\u03c4), aT(\u03c4))\u201d to follow the convention that the thing being defined is on the LHS"}