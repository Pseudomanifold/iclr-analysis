{"rating": "3: Weak Reject", "experience_assessment": "I have published in this field for several years.", "review_assessment:_checking_correctness_of_derivations_and_theory": "N/A", "review_assessment:_checking_correctness_of_experiments": "I assessed the sensibility of the experiments.", "title": "Official Blind Review #2", "review_assessment:_thoroughness_in_paper_reading": "I read the paper thoroughly.", "review": "= Summary\nNero, a method for naming procedures when decompiling binary executables is presented. It consists of a static analysis-based approach to extract a set of sequences of calls to (named) library methods present in the procedure under analysis, and a (mostly standard) seq2seq architecture to predict the procedure name as a sequence of subtokens. Experiments on real-world data show that the method performs well and outperforms some baselines.\n\n= Strong/Weak Points\n+ The method seems to work in practice\n+ The writing is reasonably clear, and it feels sufficiently precise to reproduce the results (given enough time)\n- Little novelty on modeling side (straightforward extension of seq2seq) and data extraction (straightforward application of control flow graphs)\n- The central novelty in the analysis (extracting \"kinds\") seems to contribute very little to results (cf. Tab. 2)\n- Bad fit for ICLR, as the paper is written with a focus on the PL analysis side\n\n= Recommendation\nOverall, I believe that this is an application with little novelty, and few lessons to be learned for the ICLR audience - a PL or Software Engineering conference (such as VMCAI or FSE) may be a better fit for this work. Hence, I would tend to reject this in favour of more ML-heavy papers.\n\n= Minor Comments\n* It may make sense to compare to https://2019.ase-conferences.org/details/ase-2019-papers/49/DIRE-A-Neural-Approach-to-Decompiled-Identifier-Renaming, which was very recently published (at least I only saw this after the ICLR submission deadline closed, so this is no way meant as a negative)\n* page 3, second to last paragraph: \"basic blocks in ,\" but  is undefined?\n* page 4, \"Combined Example\": I found the writing slightly misleading here: the extracted path does not show that \"(ii) getaddrinfo ... stores the results _in the previously initialized memory_\" or \"(iii) configure _it_ to be a TCP socket.\" The extracted information provides no information about the flow of information or values, which seems to be a weakness of the method.\n* page 4, last par:  - this should be up to ?\n* page 5, footnote 1: \"each call site may participates\" -> participate\n* page 8: \"In our approach, there is no need to manually define rules for building the graph as in Allamanis et al. (2018)\" - this is confusing to me, as I believe the rules for building the call graph (and abstracting kinds!) to be manually defined?"}