{"experience_assessment": "I have read many papers in this area.", "rating": "3: Weak Reject", "review_assessment:_thoroughness_in_paper_reading": "I read the paper thoroughly.", "review_assessment:_checking_correctness_of_experiments": "I carefully checked the experiments.", "title": "Official Blind Review #3", "review_assessment:_checking_correctness_of_derivations_and_theory": "I carefully checked the derivations and theory.", "review": "This paper leverage recent advances of ELMo in context embedding and apply it in the source code embedding. With the help of ELMo, source embedding can take the three benefits: (1)\u00a0\u00a0Surrounding names provide indirect information about possible values the variable could take; (2) an variable\u2019s value evolves through the program execution can be captured; (3) open a gate for the reuse of the ptr-trained model. To evaluate the effectiveness of the proposed approach, authors conduct experiments on the downstream task of the bug detection.\u00a0\nPros:\n1. This work study an interesting problem, which is challenging to solve.\n2. The application and combination of different techniques in this paper are smart.\n3. The experiment results show better performance of contextual embedding based method compared with non-contextual embedding based methods.\nCons:\n1.\u00a0It is a good application of known techniques, but the novelty is limited.\n2. It is suggested to evaluate the effectiveness of the proposed approach on various source code analysis task such as variable misuse.\n3. It is suggested to compare with other state-of-the-art baseline methods, e.g. BERT.\n4. In the end of the introduction section, the authors claim that \"we release our implementation and representation...\". However, implementation, representation and dataset are missing."}