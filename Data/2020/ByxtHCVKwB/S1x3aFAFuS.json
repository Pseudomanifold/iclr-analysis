{"rating": "1: Reject", "experience_assessment": "I have read many papers in this area.", "review_assessment:_checking_correctness_of_derivations_and_theory": "N/A", "review_assessment:_checking_correctness_of_experiments": "I assessed the sensibility of the experiments.", "title": "Official Blind Review #3", "review_assessment:_thoroughness_in_paper_reading": "I made a quick assessment of this paper.", "review": "This paper proposes a new RL-based algorithm for solving the traveling salesman problem (TSP). Its main component is the combination of OR-based 2-opt search and learning-based k-opt search. Monte Carlo tress search is employed to train the learning-based k-opt search. The experimental result suggests state-of-the-art performance over existing RL-based solvers. \n\nMy main criticism is about the positioning of the paper in the literature. This algorithm is more of an \"online\" RL algorithm with learning done for each TSP instance separately, while the compared \"offline\" RL algorithms perform learning over the TSP algorithm (and training dataset). Regarding this matter, I failed to understand the advantage or promise of the proposed algorithm over the existing solvers such as Concorde. The motivation in the paper states that existing OR algorithms are \"very complicated and consist of many hand-crafted rules and heavily rely on expert knowledge, thus being difficult to generalize to other combinatorial optimization problems\", but this algorithm seems to suffer the same problems. In particular, one could even assert that the proposed algorithm is an instance of the Tabu search method [1], which is based on keeping a record of actions taken and penalizing to revisit it. \n\nFurthermore, I think the experiment lacks some detail regarding the complexity of the algorithm. The comparison of the proposed algorithm to the existing RL-based algorithms is slightly unfair, given that the proposed algorithm is implemented in C and others are implemented in Python (except S2V-DQN). For instance, when MCTS and the method of (Joshi et al., 2019) both take 40 minutes on the TSP-100 dataset, it is likely that MCTS is slower when implemented in Python. I would suggest the authors to avoid misleading the readers by including this fact in the paper. I also suggest providing the number of iterations it took to achieve the reported results since one could compare it to other local search methods. Furthermore, the experiments seem to lack the details on the number and type of GPUs used for obtaining the reported results.  \n\n[1] Zachariasen and Dam, Tabu Search on the Geometric Traveling Salesman Problem, Meta-Heuristics. Springer 1966\n"}