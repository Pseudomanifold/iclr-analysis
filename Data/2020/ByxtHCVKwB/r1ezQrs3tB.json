{"experience_assessment": "I have published one or two papers in this area.", "rating": "1: Reject", "review_assessment:_thoroughness_in_paper_reading": "I read the paper at least twice and used my best judgement in assessing the paper.", "review_assessment:_checking_correctness_of_experiments": "I assessed the sensibility of the experiments.", "title": "Official Blind Review #1", "review_assessment:_checking_correctness_of_derivations_and_theory": "I assessed the sensibility of the derivations and theory.", "review": "The paper presents a machine-learning based heuristic for solving traveling\nsalesman problems. In particular, MCTS is used to explore a large neighbourhood.\nThe authors present their approach and evaluate it empirically.\n\nThe presented approach is interesting; a few details could be described in more\ndetail and motivated better (for example how the particular functional form for\nestimating the potential Z of an edge was chosen). but in general the paper is\nwell-written.\n\nThe main part where the paper falls short is the experimental evaluation. The\nauthors state that the reference algorithms were executed on different\nplatforms, even though at least some of them are publicly available and the\nauthors could have run them themselves. In their own experimental setup, the\nauthors overload the machines by solving instances on each hyper-threaded\nlogical core instead of the physical cores for no apparent reason. Running on\nlogical cores like this leads to significantly longer runtimes. This\nexperimental setup is changed for instance set 2 for no apparent reason.\n\nThe authors claim to improve on the optimal solution that concorde finds,\nconfirmed by a non-peer-reviewed paper, without providing a justification -- if\nthis is due to rounding errors, are the found tours the same and just the length\ncomputation is flawed? Or are the tours different?\n\nTables 1 and 2 present results in completely different formats. This makes it\nunnecessarily hard to compare results. In particular, Table 2 presents no run\ntimes.\n\nFinally, the instances used to evaluate the approach seem relatively easy.\nTSPlib contains many more instances that are more challenging to solve, with\nhundreds to thousands of cities. Even on the relatively small instances, the\npresented approach is often an order of magnitude slower than the exact solver\nconcorde -- why would I want to use the presented approach in a practical\nsetting?\n\nIn summary, I feel that the paper cannot be accepted in its current form.\n"}