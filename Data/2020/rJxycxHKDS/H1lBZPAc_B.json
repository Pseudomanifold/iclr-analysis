{"rating": "3: Weak Reject", "experience_assessment": "I have published in this field for several years.", "review_assessment:_checking_correctness_of_derivations_and_theory": "I carefully checked the derivations and theory.", "review_assessment:_checking_correctness_of_experiments": "I carefully checked the experiments.", "title": "Official Blind Review #3", "review_assessment:_thoroughness_in_paper_reading": "I read the paper thoroughly.", "review": "In this paper, the authors proposed to address the information asymmetry between domains in unsupervised domain adaptation. Innovatively, they resort to a multiflow network where each domain adaptatively selects its own pipeline. I quite appreciate the idea itself, while there are many essential issues to be addressed first. \n\nPros:\n-\tThe way tackling the information asymmetry, or untie weights, between domains is novel and interesting. \n-\tThe proposed network/framework can be easily extended to the multi-task setting, or multi-source/multi-target domain adaptation.\n-\tThe paper is well-written and easy to follow. \n\nCons:\n-\tThe most critical downside of this paper is its insufficient experiments to support the whole idea, where we will detail in the next.\n\nExperimental issues:\n-\tComparison with other state-of-the-art UDA methods (e.g., CDAN) is a must. This paper improves UDA in terms of adaptive parameters sharing, which is completely independent from most of the UDA contributions (including the DANN you compared) which improve the distribution alignment between feature representations. Therefore, it is imperative to compare that line of SOTA methods, otherwise why should we consider adaptative parameters sharing instead of distribution alignment? At best, the proposed multiflow network combined with the SOTA feature alignment method (e.g., CDAN other than DANN) should be considered and expected to beat CDAN itself. \n-\tMany ablation studies or hyperparameter sensitivity analyses are missing. \no\tHow do you determine the number of parallel flows, i.e., K? Is it possible that 3 or 4, more than 2 flows, are better even in the UDA between two domains? \no\tDo you try any other possibilities of grouping a computational unit, and how will different configurations influence the performance? \no\tIs there a possibility that none of the gates in the final layer is activated? Do you need some constraints?\n-\tSince the authors mentioned the potential of the multi-flow network in adaptation between multiple domains, it is necessary to investigate multi-source or multi-target domain adaptation. Only in this case may the significance of different K values be demonstrated. \n-\tThe baseline results in Table 1 are not comparable to some reported papers, and even lower than those reported in other UDA papers. "}