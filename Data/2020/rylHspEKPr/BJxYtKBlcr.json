{"experience_assessment": "I do not know much about this area.", "rating": "6: Weak Accept", "review_assessment:_thoroughness_in_paper_reading": "I read the paper at least twice and used my best judgement in assessing the paper.", "review_assessment:_checking_correctness_of_experiments": "I assessed the sensibility of the experiments.", "title": "Official Blind Review #2", "review_assessment:_checking_correctness_of_derivations_and_theory": "N/A", "review": "** Summary\nThe paper studies the problem of program synthesis from examples and it proposes the notion of property signature as a set of \"features\" describing the program that can be used to simplify the synthesis by combining together sub-programs with similar features.\n\n** Evaluation\nThe paper is outside my scope of research, so my review is an educated guess.\n\nThe use of properties to summarize some features about the program and the possibility to evaluate them directly from samples seems a very interesting idea. As the authors mentioned, this may help in creating useful features and useful architectures to simplify the learning task. The concept of property signatures is very well introduced and explained. The authors also provide an extensive comparison to related work. The empirical results seem promising in showing how property signatures make the synthesis much faster and better.\n\nThe downsides of the paper are:\n- While it is clear how to build property signatures, it is quite unclear to me how they simplify the generation of programs that combine smaller/simpler programs.\n- Sect 3.2 on how to learn useful properties is rather vague and it would need a much more detail explanation.\n- Although the authors release code for the paper, the description of the experiments seem rather shallow and it requires a much higher level of detail on how the learning process is set up and executed.\n"}