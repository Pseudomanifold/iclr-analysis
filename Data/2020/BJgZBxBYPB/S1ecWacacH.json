{"rating": "3: Weak Reject", "experience_assessment": "I have published one or two papers in this area.", "review_assessment:_checking_correctness_of_derivations_and_theory": "N/A", "review_assessment:_checking_correctness_of_experiments": "I assessed the sensibility of the experiments.", "title": "Official Blind Review #4", "review_assessment:_thoroughness_in_paper_reading": "I read the paper thoroughly.", "review": "This paper proposes an architecture that encodes a known physics motion equation of a trajectory of a moving object. The modeled equation has 3 variables and the network works in a latent space- contrary to taking raw images. It uses an auxiliary network (named InferNet) to train the final one used at inference time (named RelateNet). The former aims to reconstruct the input sequence of positions representing trajectory, and has intermediate 3 latent variables that correspond to the 3 variables of the modeled equation, while as decoder it uses the modeled known equation itself. The latter is a mapping from the relative position of the object to 2 latent variables of the former InferNet, and is trained with MSE loss. At inference, RelateNet takes as input the relative position of the object, predicts 2 variables of the equation and finally uses the motion equation to calculate the trajectory.\n\nIt is not easy for me to understand the use-case of the proposed method. In which real-world scenarios we would have the exact motion equation, and why given that we know such an equation we would want to learn a mapping from the relative position to a trajectory. In other words, it would be much more useful to learn the projectile motion equation itself. How does the proposed method handle input sequences which do not follow equation 5? To use this method do we need to know in advance the exact motion equation and its relevant \u2018in-game variables\u2019? In which cases would the former hold and in which cases would the latter be easy to obtain from raw pixels? Could the authors elaborate on it?\n\nIf I understand correctly, the trajectories (the input to InferNet) were generated with known $G$, $V_0$ and $\\theta$ (the 3 latent variables of InferNet). It is not clear to me why the authors don\u2019t use these for the MSE loss used to train InferNet (rather than using the projectile motion equation). \n\nIn my opinion, the introduction and related work sections do not reflect what is proposed in the paper. As an example, paragraph 2 of the introduction refers to use-cases where we would like to learn dynamics that govern certain motions directly from observations, whereas the proposed method uses extracted positions as input, and handcrafts the motion equation. The third paragraph of page 2 mentions agents failing to solve a game with Newtonian physics, whereas the method in this paper does not demonstrate empirically a way that this architecture could be used by an agent.\n\n- Is the \u2018projectile motion equation\u2019 missing from Fig.2-right; is it used for inference? Is G from InferNet also input to RelateNet?\n\nIn summary, in my opinion, the technical novelty of this paper is limited as it uses MLP mappings that in some sense aim at learning the inverse of the equation that generated the data. Moreover, after reading the paper the use-case of the proposed method is not clear to me and the writing is unclear (see examples above and below).\n\n\u2014 Minor \u2014\n- The term \u2018in-game variables\u2019 is used in a few places and is explained later in the text (Pg.5). I think that It would be helpful if it is explained in more detail the first time it is mentioned.\n- I don\u2019t understand the second sentence of the abstract.\n- Pg1: build a relationships -> build relationships.\n- Pg2: I don\u2019t understand what the authors mean by \u2018clone of Angry Birds.\u2019\n- Pg3: is $f_{associate}$ trained jointly or afterwards?\n- Pg4: was MSE the loss used for $f_{simple}$?\n- It would help adding sub-captions in Fig. 6.\n"}