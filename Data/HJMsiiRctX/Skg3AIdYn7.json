{"title": "Official Review: combines a model-free approach and a model-based approach for one game, Flappy Bird. Very few details about program induction or the physics engine.", "review": "This paper combines a model-free approach and a model-based approach for the game of Flappy Bird. The model-free approach is a CNN on the screen snapshots, in the same fashion as DQN was used for Atari games. The model-based approach is a probabilistic model of Newtonian laws of motion. \nThe combination of model-free and model-based approaches is definitely one very relevant issue in machine learning, especially in interactive situations, such as reinforcement learning and robotics. The ideas that this paper combines are state-of-the-art and hence is it informative to see how these two particular techniques from each paradigm work together. The most interesting part is that the probabilistic model restricts the CNN restricts the sample action for the model.\nI\u2019m not sure how novel this particular combination is, but other systems have also used a model (or a solver) to restrict the possibilities of the exploration. For instance, AlphaGo combines the model-free approach with the rules of the game (at least in the first versions of AlphaGo), and others use Montecarlo Tree Search in a similar vain.\nThe paper is generally well-written, with some typos occasionally. However, I think that some parts of the process are no well explained, or explained in the wrong order.\nFor instance, the title and the abstract misled me for quite a while. The title says program induction, and this is then said to be in a fashion similar to Ghahramani 2015, but no further details are given. Is this using Julia? In any case, where is the induction? Later on, it is said that \u201cthe model learns the distributions\u201d. but the exact way is completely missing. In other words, the model-based part is not described and encapsulated in a cryptic PHYSICSSIMULATION. In any case, if the model just learn the parameter, I wouldn\u2019t call this \u201cprogram induction\u201d, at least in the same way as Lake and others use it, or in the way it is used in the area of \u201cinductive programming\u201d. \nThe game should be describe at the start as \u201cunwanted collisions\u201d are meaningless for a reader who doesn\u2019t know the goal of the game (which is explained in the last paragraph of the paper).\nThe main problem is that the physics simulation is not learnt and hence rewritten for other games with other physics. This should be solved, in order to see significant progress for benchmarks such as ALE (and properly compare with DQN and many other variants). Perhaps robotics is a better application area, as the physics are always the same (true physics).\nRegarding the experiments, they are not very conclusive, especially because the difference is not that large and it is only one single game. The application to other games would be needed, especially if the physics is different. Also, the parameters are different (the ms) and I didn\u2019t understand if these are the best choices, or the possible choices given the computational limitations. In other words, I don\u2019t know if all techniques are compared in the same compute and data conditions. In Figure 3, the yaxis should be explained.\n(hum 2017) I imagine that this refers to the authors, otherwise it is a typo.\nI didn\u2019t understand the future work. I didn\u2019t parse the bit: \u201clearn about rewards structures in games of physics intuition\u201d.  Actually, the final paragraph gives hints about how much assistance and specialisation the approach is given and hence the limit of generalisations to other problems. These limitations should be stated from the beginning.\nPros:\n-\tImportant integration of model-free and model-based approaches.\n-\tState-of-the-art techniques\n\nCons:\n-\tI don\u2019t see program induction, despite being in the title.\n-\tExperiments are limited to one game\n-\tThe physics engine is specialised for this game, and hence the approach is difficult to generalise (automatically) for a range of problems where the models should be different.\nTypos: \nGharmani -> Ghahramani\novers -> over\nbird is required to chose -> the bird is required to choose\n", "rating": "4: Ok but not good enough - rejection", "confidence": "2: The reviewer is willing to defend the evaluation, but it is quite likely that the reviewer did not understand central parts of the paper"}