{"title": "Training to predict kNN features and labels improves generalization.", "review": "This work uses sequence-to-sequence and memory network neural nets to learn a\nnetwork that not only predicts a label, but also predicts nearest neighbors and\ntheir label.  The intuition is that by training on a related but harder task,\nthe network is forced to learn not just about sampled points but about the\nbehavior in regions around the actual training examples.\n\nTheir work shows that imposing these additional requirements on the model does\nresult in better performance on unseen data, where only the label of the unseen\ndata point is required as output.  They show that learning more about the \nglobal {feature,label} distribution improves F1 scores, and suggest that their\nmethods can be used as an example generator for datasets with class imbalance.\n\nThe writing was clear.  I had only 1 misunderstanding that cause me trouble,\nnamely the first sentence of \"Classification\", where I might put the word\n'benchmark' up front rather than at the end of this somewhat long sentence.\nBy the time 'knn benchmark' appeared some paragraphs later, I realized I\nhad missed something, and had to backtrack.\n\nFigs 1--3 are only viewable on screen with fairly extreme magnification. I\nfound different viewers varied in legibility at these extreme zoom settings.\nHowever, when expanded so y-axis numbers could be deciphered, it turned out\nthat actual improvements in F1 score were rather modest.\n\nFor 4 datasets, their F1 scores of their best method, V2VSLS, improved by ~ 1.5\nto 6%.  They found that their methods were less affected by out-of-core\ncomputation than the benchmark kNN F1 scores.\n\nI did have some questions about the problem formulation.  I did not really\nunderstand why the models wanted to reproduce the exact ordering of the\nnearest neighbors, other than this is easy to formulate.  This makes sense\nfor n.n. label sequences, where further points might be in some neighboring\nclass.  But for predicting the feature vectors of n.n., it seems that the\nexact order is not robust, in the sense very small distance changes can cause\nabrupt shifts in the target nearest-neghbor ordering.  Is there some way\nfor me to understand why this does not pose a problem?  Or is there perhaps\na way to make the loss function a bit less dependent on the precise order\nof the generated feature vector sequence?\n\nIn the computational experiments, with the choice of datasets, it was often\nhard for me to judge how much different aspects of their 4 network structures\nwere really being excercised.  The main issue is the all problems used only\n2--3 classes.  I could not guess what fraction of data points had actual label\nchanges within the 5 n.n..  For many datasets, \"same class\" might be a pretty\ngood predictor of nearest neighbor label.\n\nAlternatively, one can consider the other extreme, of very many classes.\nDoes it still make sense to try to predict the order of nearest neighbor labels in\nsuch a setting?\n\nThe authors provide evidence of some performance improvement, but I would\nencourage them to provide some intuition about what the networks are actually\nlearning.  Some of this can be done with their existing data.\n\nFor example, on average, what are the distances from predicted feature vectors\nto the actual nn feature vectors?  If the feature sequence is typically badly\npredicted, then this might allow the authors to propose that the network is\n*actually* learning some simpler features of the the distributions underlying\nan actual {feature,label} sequence.  This might allow simplified training losses,\nbased, on things like direction and distance to same-label cluster center,\ndirection+distance to average same-class nn.s, direction and distance to\nclosest differently labeled cluster, etc.  Or does their data suggest that\ntheir models are actually learning the precise nearest neighbor ordering?\n\nSuch considerations might be able to improve the OOC training, since\n\"global\" aspects of the distribution features (like \"cluster center\")\nremain approx. valid as training batches changes.\n\nThe other question I had was with the oversampling proposition.  The extent\nof class imbalance in the datasets is not described.  Perhaps it belongs in\nTable 1.  Their approach seems a lot of work for modest gains usually available\nwith oversampling.  Can the authors provide any guideline for how many members a\nminority class should have before using their sequence-to-sequence technique?\n\nPros: they improve generalization to unseen data.\nCons: their models are considerably more complex, and they do not analyze their\ndata in enough detail to suggest whether their complexity is necessary, or perhaps\ncould be reduced.  Figures are too small (many unreadable in printed copy).\nDatasets have very few classes and the extent to which nearest neighbors are\nof different class not reported.\n", "rating": "6: Marginally above acceptance threshold", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}